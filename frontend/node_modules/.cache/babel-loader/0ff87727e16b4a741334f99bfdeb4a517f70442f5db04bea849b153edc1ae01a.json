{"ast":null,"code":"import { api } from './api';\nexport const expenseService = {\n  getExpenses: async () => {\n    try {\n      const response = await api.getExpenses();\n      return response;\n    } catch (error) {\n      console.error('Error fetching expenses:', error);\n      return {\n        success: false,\n        message: 'Failed to fetch expenses'\n      };\n    }\n  },\n  addExpense: async expenseData => {\n    // This would be an actual API call in a real application\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            id: Date.now(),\n            ...expenseData\n          }\n        });\n      }, 1000);\n    });\n  },\n  updateExpense: async (id, expenseData) => {\n    // This would be an actual API call in a real application\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            id,\n            ...expenseData\n          }\n        });\n      }, 1000);\n    });\n  }\n};","map":{"version":3,"names":["api","expenseService","getExpenses","response","error","console","success","message","addExpense","expenseData","Promise","resolve","setTimeout","data","id","Date","now","updateExpense"],"sources":["C:/Users/VELUTHAI/Desktop/SOCIETY FINANCE/frontend/src/services/expenseService.js"],"sourcesContent":["import { api } from './api';\r\n\r\nexport const expenseService = {\r\n  getExpenses: async () => {\r\n    try {\r\n      const response = await api.getExpenses();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error fetching expenses:', error);\r\n      return { success: false, message: 'Failed to fetch expenses' };\r\n    }\r\n  },\r\n  \r\n  addExpense: async (expenseData) => {\r\n    // This would be an actual API call in a real application\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({ success: true, data: { id: Date.now(), ...expenseData } });\r\n      }, 1000);\r\n    });\r\n  },\r\n  \r\n  updateExpense: async (id, expenseData) => {\r\n    // This would be an actual API call in a real application\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({ success: true, data: { id, ...expenseData } });\r\n      }, 1000);\r\n    });\r\n  }\r\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAE3B,OAAO,MAAMC,cAAc,GAAG;EAC5BC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACE,WAAW,CAAC,CAAC;MACxC,OAAOC,QAAQ;IACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA2B,CAAC;IAChE;EACF,CAAC;EAEDC,UAAU,EAAE,MAAOC,WAAW,IAAK;IACjC;IACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UAAEL,OAAO,EAAE,IAAI;UAAEO,IAAI,EAAE;YAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;YAAE,GAAGP;UAAY;QAAE,CAAC,CAAC;MACtE,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EAEDQ,aAAa,EAAE,MAAAA,CAAOH,EAAE,EAAEL,WAAW,KAAK;IACxC;IACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UAAEL,OAAO,EAAE,IAAI;UAAEO,IAAI,EAAE;YAAEC,EAAE;YAAE,GAAGL;UAAY;QAAE,CAAC,CAAC;MAC1D,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}