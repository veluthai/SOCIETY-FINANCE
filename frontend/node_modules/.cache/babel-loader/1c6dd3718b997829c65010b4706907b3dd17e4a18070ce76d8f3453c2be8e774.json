{"ast":null,"code":"// This is a mock API service that would be replaced with actual API calls\nexport const api = {\n  // Authentication endpoints\n  login: (email, password, userType) => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        if (userType === 'admin' && email === 'admin@redvalley.com' && password === 'admin123') {\n          resolve({\n            success: true,\n            data: {\n              email,\n              name: 'Administrator',\n              userType: 'admin'\n            }\n          });\n        } else if (userType === 'member') {\n          resolve({\n            success: true,\n            data: {\n              email,\n              name: 'Member',\n              userType: 'member'\n            }\n          });\n        } else {\n          resolve({\n            success: false,\n            message: 'Invalid credentials'\n          });\n        }\n      }, 1000);\n    });\n  },\n  register: userData => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            ...userData,\n            userType: 'member'\n          }\n        });\n      }, 1000);\n    });\n  },\n  // Dashboard data\n  getDashboardStats: userType => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        if (userType === 'admin') {\n          resolve({\n            totalMembers: 45,\n            pendingComplaints: 4,\n            totalExpenses: '₹1,25,000',\n            monthlyCollection: '₹4,50,000'\n          });\n        } else {\n          resolve({\n            monthlyMaintenance: '₹5,000',\n            pendingDues: '₹2,500',\n            lastPayment: '₹5,000',\n            paymentStatus: 'Paid'\n          });\n        }\n      }, 500);\n    });\n  },\n  // Complaints\n  getComplaints: () => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve([{\n          id: 1,\n          title: 'Water leakage in B block',\n          status: 'pending',\n          date: '2023-10-14'\n        }, {\n          id: 2,\n          title: 'Gym equipment not working',\n          status: 'pending',\n          date: '2023-10-13'\n        }, {\n          id: 3,\n          title: 'Street light not working',\n          status: 'pending',\n          date: '2023-10-12'\n        }, {\n          id: 4,\n          title: 'Elevator maintenance required',\n          status: 'pending',\n          date: '2023-10-11'\n        }]);\n      }, 500);\n    });\n  },\n  // Expenses\n  getExpenses: () => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve([{\n          id: 1,\n          title: 'Security Services',\n          amount: '₹50,000',\n          date: '2023-10-01'\n        }, {\n          id: 2,\n          title: 'Maintenance',\n          amount: '₹30,000',\n          date: '2023-10-05'\n        }, {\n          id: 3,\n          title: 'Electricity Bill',\n          amount: '₹25,000',\n          date: '2023-10-10'\n        }, {\n          id: 4,\n          title: 'Water Supply',\n          amount: '₹20,000',\n          date: '2023-10-12'\n        }]);\n      }, 500);\n    });\n  },\n  // Notifications\n  getNotifications: () => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve([{\n          id: 1,\n          title: 'Maintenance notice',\n          message: 'Scheduled maintenance on Oct 20',\n          date: '2023-10-14'\n        }, {\n          id: 2,\n          title: 'Payment reminder',\n          message: 'Your maintenance payment is due',\n          date: '2023-10-13'\n        }, {\n          id: 3,\n          title: 'Community event',\n          message: 'Diwali celebration on Oct 24',\n          date: '2023-10-12'\n        }]);\n      }, 500);\n    });\n  }\n};","map":{"version":3,"names":["api","login","email","password","userType","Promise","resolve","setTimeout","success","data","name","message","register","userData","getDashboardStats","totalMembers","pendingComplaints","totalExpenses","monthlyCollection","monthlyMaintenance","pendingDues","lastPayment","paymentStatus","getComplaints","id","title","status","date","getExpenses","amount","getNotifications"],"sources":["C:/Users/VELUTHAI/Desktop/SOCIETY FINANCE/frontend/src/services/api.js"],"sourcesContent":["// This is a mock API service that would be replaced with actual API calls\r\nexport const api = {\r\n  // Authentication endpoints\r\n  login: (email, password, userType) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        if (userType === 'admin' && email === 'admin@redvalley.com' && password === 'admin123') {\r\n          resolve({ success: true, data: { email, name: 'Administrator', userType: 'admin' } });\r\n        } else if (userType === 'member') {\r\n          resolve({ success: true, data: { email, name: 'Member', userType: 'member' } });\r\n        } else {\r\n          resolve({ success: false, message: 'Invalid credentials' });\r\n        }\r\n      }, 1000);\r\n    });\r\n  },\r\n  \r\n  register: (userData) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({ success: true, data: { ...userData, userType: 'member' } });\r\n      }, 1000);\r\n    });\r\n  },\r\n  \r\n  // Dashboard data\r\n  getDashboardStats: (userType) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        if (userType === 'admin') {\r\n          resolve({\r\n            totalMembers: 45,\r\n            pendingComplaints: 4,\r\n            totalExpenses: '₹1,25,000',\r\n            monthlyCollection: '₹4,50,000'\r\n          });\r\n        } else {\r\n          resolve({\r\n            monthlyMaintenance: '₹5,000',\r\n            pendingDues: '₹2,500',\r\n            lastPayment: '₹5,000',\r\n            paymentStatus: 'Paid'\r\n          });\r\n        }\r\n      }, 500);\r\n    });\r\n  },\r\n  \r\n  // Complaints\r\n  getComplaints: () => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve([\r\n          { id: 1, title: 'Water leakage in B block', status: 'pending', date: '2023-10-14' },\r\n          { id: 2, title: 'Gym equipment not working', status: 'pending', date: '2023-10-13' },\r\n          { id: 3, title: 'Street light not working', status: 'pending', date: '2023-10-12' },\r\n          { id: 4, title: 'Elevator maintenance required', status: 'pending', date: '2023-10-11' }\r\n        ]);\r\n      }, 500);\r\n    });\r\n  },\r\n  \r\n  // Expenses\r\n  getExpenses: () => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve([\r\n          { id: 1, title: 'Security Services', amount: '₹50,000', date: '2023-10-01' },\r\n          { id: 2, title: 'Maintenance', amount: '₹30,000', date: '2023-10-05' },\r\n          { id: 3, title: 'Electricity Bill', amount: '₹25,000', date: '2023-10-10' },\r\n          { id: 4, title: 'Water Supply', amount: '₹20,000', date: '2023-10-12' }\r\n        ]);\r\n      }, 500);\r\n    });\r\n  },\r\n  \r\n  // Notifications\r\n  getNotifications: () => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve([\r\n          { id: 1, title: 'Maintenance notice', message: 'Scheduled maintenance on Oct 20', date: '2023-10-14' },\r\n          { id: 2, title: 'Payment reminder', message: 'Your maintenance payment is due', date: '2023-10-13' },\r\n          { id: 3, title: 'Community event', message: 'Diwali celebration on Oct 24', date: '2023-10-12' }\r\n        ]);\r\n      }, 500);\r\n    });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}