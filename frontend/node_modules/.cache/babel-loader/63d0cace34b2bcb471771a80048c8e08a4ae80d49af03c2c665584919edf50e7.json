{"ast":null,"code":"import { api } from './api';\nexport const notificationService = {\n  getNotifications: async () => {\n    try {\n      const response = await api.getNotifications();\n      return response;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return {\n        success: false,\n        message: 'Failed to fetch notifications'\n      };\n    }\n  },\n  addNotification: async notificationData => {\n    // This would be an actual API call in a real application\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            id: Date.now(),\n            ...notificationData\n          }\n        });\n      }, 1000);\n    });\n  },\n  markAsRead: async id => {\n    // This would be an actual API call in a real application\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            id,\n            read: true\n          }\n        });\n      }, 500);\n    });\n  }\n};","map":{"version":3,"names":["api","notificationService","getNotifications","response","error","console","success","message","addNotification","notificationData","Promise","resolve","setTimeout","data","id","Date","now","markAsRead","read"],"sources":["C:/Users/VELUTHAI/Desktop/SOCIETY FINANCE/frontend/src/services/notificationService.js"],"sourcesContent":["import { api } from './api';\r\n\r\nexport const notificationService = {\r\n  getNotifications: async () => {\r\n    try {\r\n      const response = await api.getNotifications();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n      return { success: false, message: 'Failed to fetch notifications' };\r\n    }\r\n  },\r\n  \r\n  addNotification: async (notificationData) => {\r\n    // This would be an actual API call in a real application\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({ success: true, data: { id: Date.now(), ...notificationData } });\r\n      }, 1000);\r\n    });\r\n  },\r\n  \r\n  markAsRead: async (id) => {\r\n    // This would be an actual API call in a real application\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({ success: true, data: { id, read: true } });\r\n      }, 500);\r\n    });\r\n  }\r\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAE3B,OAAO,MAAMC,mBAAmB,GAAG;EACjCC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACE,gBAAgB,CAAC,CAAC;MAC7C,OAAOC,QAAQ;IACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAgC,CAAC;IACrE;EACF,CAAC;EAEDC,eAAe,EAAE,MAAOC,gBAAgB,IAAK;IAC3C;IACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UAAEL,OAAO,EAAE,IAAI;UAAEO,IAAI,EAAE;YAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;YAAE,GAAGP;UAAiB;QAAE,CAAC,CAAC;MAC3E,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EAEDQ,UAAU,EAAE,MAAOH,EAAE,IAAK;IACxB;IACA,OAAO,IAAIJ,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UAAEL,OAAO,EAAE,IAAI;UAAEO,IAAI,EAAE;YAAEC,EAAE;YAAEI,IAAI,EAAE;UAAK;QAAE,CAAC,CAAC;MACtD,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}